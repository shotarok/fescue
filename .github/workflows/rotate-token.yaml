name: Rotate Feedly API Token

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 1 * *'

jobs:
  rotate-token:
    permissions:
      actions: write
    runs-on: ubuntu-latest
    steps:
      - run: |
          sudo apt update
          sudo apt install -y jq curl
      - id: rotate
        run: |-

          # Prepare tokens for refresh
          echo "${{ secrets.FEEDLY_TOKEN_JSON }}" | base64 --decode > token.json
          BEARER_TOKEN=$(jq .access_token token.json -r)
          REFRESH_TOKEN=$(jq .refresh_token token.json -r)
          echo "::add-mask::$BEARER_TOKEN"
          echo "::add-mask::$REFRESH_TOKEN"

          # Get a new token with a refresh token
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${BEARER_TOKEN}" \
            -d "{\"refresh_token\": \"${REFRESH_TOKEN}\", \"grant_type\": \"refresh_token\"}" \
            "https://cloud.feedly.com/v3/auth/token?client_id=feedlydev&client_secret=feedlydev" > response.json

          # Replace the old token with a new token
          NEW_TOKEN=$(jq .access_token response.json -r)
          NEW_TOKEN_JSON=$(jq -c ".access_token = \"${NEW_TOKEN}\"" token.json)
          echo "::add-mask::${NEW_TOKEN}"

          # Set up the new token json as an output
          echo "new_token_json=${NEW_TOKEN_JSON}" >> $GITHUB_OUTPUT
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - run: npm install tweetsodium@0.0.5
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PRIVATE_ACCESS_TOKEN }}
          script: |-

            const response = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const key = response.data.key;
            const key_id = response.data.key_id;

            // Deal with base64 encoded token.json as a secret value
            const value = btoa('${{steps.rotate.outputs.new_token_json}}');

            // Convert the message and key to Uint8Array's (Buffer implements that interface)
            const messageBytes = Buffer.from(value);
            const keyBytes = Buffer.from(key, 'base64');

            // Encrypt using LibSodium.
            const sodium = require('tweetsodium');
            const encryptedBytes = sodium.seal(messageBytes, keyBytes);

            // Base64 the encrypted secret
            const encrypted = Buffer.from(encryptedBytes).toString('base64');

            // Rotate the feedly api token
            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: "FEEDLY_TOKEN_JSON",
              encrypted_value: encrypted,
              key_id: key_id,
            });
